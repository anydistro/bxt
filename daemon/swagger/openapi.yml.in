openapi: 3.0.0
info:
  title: b[x]t API
  description: API for the b[x]t repository management service.
  version: "MVP"
servers:
  - url: "/"

security:
  - cookieAuth: []
  - bearerAuth: []

paths:
  /api/auth:
    post:
      summary: Authenticate user
      operationId: auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequest"
      responses:
        "200":
          description: Authentication successful, JWT token set in cookie or returned as bearer token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized
  /api/auth/refresh:
    get:
      summary: Refresh JWT token
      operationId: refresh
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: "JWT refresh token"

      responses:
        "200":
          description: Token refresh successful, new JWT token set in cookie or returned as bearer token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized

  /api/auth/revoke:
    post:
      summary: Revoke refresh token
      operationId: revoke
      responses:
        "200":
          description: Token successfully revoked
        "400":
          description: Invalid request
        "401":
          description: Unauthorized
  /api/logs/packages:
    get:
      summary: Get package logs
      operationId: getPackageLogs
      responses:
        "200":
          description: List of package log entries
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogResponse"
        "400":
          description: Invalid request
        "403":
          description: No permissions
  /api/compare:
    post:
      summary: Compare sections
      operationId: compare
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompareRequest"
      responses:
        "200":
          description: Comparison result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompareResponse"
        "400":
          description: Invalid request
        "403":
          description: No permissions
  /api/packages/commit:
    post:
      summary: Commit package transaction
      operationId: commitTransaction
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                packageFile:
                  type: string
                  format: binary
                packageSignature:
                  type: string
                  format: binary
                packageSection:
                  type: string
                to_delete:
                  type: string
                to_move:
                  type: string
                to_copy:
                  type: string
      responses:
        "200":
          description: Transaction committed successfully
        "400":
          description: Invalid request
        "403":
          description: No permissions
  /api/packages:
    get:
      summary: Get packages by section
      operationId: getPackages
      parameters:
        - name: branch
          in: query
          required: true
          schema:
            type: string
        - name: repository
          in: query
          required: true
          schema:
            type: string
        - name: architecture
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of packages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PackageResponse"
        "400":
          description: Invalid request
        "403":
          description: No permissions
  /api/packages/sync:
    post:
      summary: Synchronize packages
      operationId: sync
      responses:
        "200":
          description: Packages synchronized successfully
        "400":
          description: Invalid request
        "403":
          description: No permissions
  /api/packages/snap:
    post:
      summary: Snap packages between branches
      operationId: snap
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SnapRequest"
      responses:
        "200":
          description: Packages snapped successfully
        "400":
          description: Invalid request
        "403":
          description: No permissions
  /api/sections:
    get:
      summary: Get sections
      operationId: getSections
      responses:
        "200":
          description: List of sections
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SectionResponse"
        "400":
          description: Invalid request
        "403":
          description: No permissions
  /api/users/add:
    post:
      summary: Add a new user
      operationId: addUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddUserRequest"
      responses:
        "200":
          description: User added successfully
        "400":
          description: Invalid request
        "403":
          description: No permissions
  /api/users/update:
    patch:
      summary: Update an existing user
      operationId: updateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        "200":
          description: User updated successfully
        "400":
          description: Invalid request
        "403":
          description: No permissions
  /api/users/remove/{user_name}:
    delete:
      summary: Remove a user
      operationId: removeUser
      parameters:
        - name: user_name
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User removed successfully
        "400":
          description: Invalid request
        "403":
          description: No permissions
  /api/users:
    get:
      summary: Get list of users
      operationId: getUsers
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserResponse"
        "400":
          description: Invalid request
        "403":
          description: No permissions

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    AuthRequest:
      type: object
      properties:
        name:
          type: string
        password:
          type: string
        response_type:
          type: string
      required:
        - name
        - password
        - response_type

    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        token_type:
          type: string

    CompareRequest:
      type: array
      items:
        $ref: "#/components/schemas/SectionRequest"

    CompareResponse:
      type: object
      properties:
        sections:
          type: array
          items:
            $ref: "#/components/schemas/PackageSection"
        compareTable:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: object
              additionalProperties:
                type: string

    LogResponse:
      type: array
      items:
        $ref: "#/components/schemas/LogEntryResponse"

    LogEntryResponse:
      type: object
      properties:
        id:
          type: string
        time:
          type: integer
          format: int64
        type:
          $ref: "#/components/schemas/LogEntryType"
        package:
          $ref: "#/components/schemas/PackageResponse"
      required:
        - id
        - time
        - type
        - package

    LogEntryType:
      type: string
      enum:
        - Add
        - Remove
        - Update

    PackageResponse:
      type: object
      properties:
        name:
          type: string
        section:
          type: string
        poolEntries:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/PoolEntryResponse"
        preferredLocation:
          type: string

    PoolEntryResponse:
      type: object
      properties:
        version:
          type: string
        hasSignature:
          type: boolean

    PackageSection:
      type: object
      properties:
        branch:
          type: string
        repository:
          type: string
        architecture:
          type: string
      required:
        - branch
        - repository
        - architecture

    SectionRequest:
      $ref: "#/components/schemas/PackageSection"

    SectionResponse:
      $ref: "#/components/schemas/PackageSection"

    SnapRequest:
      type: object
      properties:
        source:
          $ref: "#/components/schemas/SectionRequest"
        target:
          $ref: "#/components/schemas/SectionRequest"
      required:
        - source
        - target

    AddUserRequest:
      type: object
      properties:
        name:
          type: string
        password:
          type: string
        permissions:
          type: array
          items:
            type: string

    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
        password:
          type: string
        permissions:
          type: array
          items:
            type: string

    UserResponse:
      type: object
      properties:
        name:
          type: string
        permissions:
          type: array
          items:
            type: string
